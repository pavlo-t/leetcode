#![allow(dead_code)]
/// 389. Find the Difference
/// ========================
///
/// You are given two strings `s` and `t`.
///
/// String `t` is generated by random shuffling string `s` and then add one more letter at a random position.
///
/// Return the letter that was added to `t`.
///
/// __Constraints:__
///
/// - `0 <= s.length <= 1000`
/// - `t.length == s.length + 1`
/// - `s` and `t` consist of lowercase English letters.
///
/// https://leetcode.com/problems/find-the-difference/
struct Solution;
impl Solution {
    pub fn find_the_difference(s: String, t: String) -> char {
        fn count(s: String) -> [usize; 26] {
            s.bytes().fold([0; 26], |mut rsf, b| {
                rsf[(b - b'a') as usize] += 1;
                rsf
            })
        }
        let counts_s = count(s);
        let counts_t = count(t);

        for i in 0..26 {
            if counts_t[i] > counts_s[i] {
                return (i as u8 + b'a') as char;
            }
        }
        '-'
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn abcd_abcde() {
        let s = "abcd".to_string();
        let t = "abcde".to_string();
        assert_eq!(Solution::find_the_difference(s, t), 'e');
        // Explanation: 'e' is the letter that was added.
    }
    #[test]
    fn empty_y() {
        assert_eq!(Solution::find_the_difference("".into(), "y".into()), 'y');
    }
}
