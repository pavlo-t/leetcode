#![allow(dead_code)]

/// # Remove Palindromic Subsequences
///
/// Given a string `s` consisting only of letters `'a'` and `'b'`.
/// In a single step you can remove one palindromic __subsequence__ from `s`.
///
/// Return the minimum number of steps to make the given string empty.
///
/// A string is a subsequence of a given string,
/// if it is generated by deleting some characters of a given string without changing its order.
///
/// A string is called palindrome if is one that reads the same backward as well as forward.
///
/// __Constraints:__
///
/// - `0 <= s.length <= 1000`
/// - `s` only consists of letters 'a' and 'b'
///
/// https://leetcode.com/explore/featured/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3665/
struct Solution;

impl Solution {
    pub fn remove_palindrome_sub(s: String) -> i32 {
        if s.len() == 0 {
            0
        } else {
            let bytes = s.as_bytes();
            let mut l = 0;
            let mut r = s.len() - 1;
            while l < r {
                if bytes[l] != bytes[r] {
                    return 2;
                }
                l += 1;
                r -= 1;
            }
            1
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn example1_ababa_should_produce_1() {
        assert_eq!(Solution::remove_palindrome_sub("ababa".to_string()), 1);
        // Explanation: String is already palindrome
    }
    #[test]
    fn example2_abb_should_produce_2() {
        assert_eq!(Solution::remove_palindrome_sub("abb".to_string()), 2);
        // Explanation: "abb" -> "bb" -> "".
        // Remove palindromic subsequence "a" then "bb".
    }
    #[test]
    fn example3_baabb_should_produce_2() {
        assert_eq!(Solution::remove_palindrome_sub("baabb".to_string()), 2);
        // Explanation: "baabb" -> "b" -> "".
        // Remove palindromic subsequence "baab" then "b".
    }
    #[test]
    fn example4_empty_string_should_produce_0() {
        assert_eq!(Solution::remove_palindrome_sub("".to_string()), 0);
    }
}
